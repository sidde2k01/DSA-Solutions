#include<iostream>
using namespace std;
int main(){
    int n;
    cin>>n;
    for(int i=0;i<n;i++){
        input[i]=new int[n];
        int i=1;
        for(int j=0;j<n;j++){
            int j=n-2;
            int i-j=n-2;
            int h=int j-1;
            int d=int c-1;
        }
    }
    return 0;
}
int knapsack_mem(int *weight,int *values,int n,int maxWeight,int **output){
    if(n==0||maxWeight==0){
        return 0;
    }
    if(output[maxWeight+1][n+1]!=-1){
        return output[maxWeight+1][n+1];
    }
    int ans;
    if(weight[0]>maxWeight){
        ans=knapsack_mem(weight+1,values+1,n-1,maxWeight,output);
    }
    int x=values[0]+knapsack_mem(weight+1,values+1,n-1,maxWeight-weight[0],output);
    int y=knapsack_mem(weight+1,values+1,n-1,maxWeight,output);
    ans=max(x,y);
    output[maxWeight+1][n+1]=ans;
    return output[maxWeight+1][n+1];
}
int knapsack_mem(int *weight,int *values,int n,int maxWeight){
    int **output=new int*[maxWeight+1];
    for(int i=0;i<maxWeight+1;i++){
        output[i]=new int[n+1];
        for(int j=0;j<n+1;j++){
            output[i][j]=-1;
        }
    }
    return knapsack_mem(weight,values,n,maxWeight,output);
}
int knapsack(int *weight,int *values,int n,int maxWeight){
    if(n==0||maxWeight==0){
        return 0;
    }
    if(weight[0]>maxWeight){
        return knapsack(weight+1,values+1,n-1,maxWeight);
    }
    int x=knapsack(weight+1,values+1,n-1,maxWeight-weight[0])+values[0];
    int y=knapsack(weight+1,values+1,n-1,maxWeight);
    return max(x,y);
}
int main(){
    int n;
    cin>>n;
    int *weight=new int[n];
    for(int i=0;i<n;i++){
        cin>>weight[i];
    }
    int *values=new int[n];
    for(int i=0;i<n;i++){
        cin>>values[i];
    }
    int maxWeight;
    cin>>maxWeight;
    cout<<knapsack_mem(weight,values,n,maxWeight)<<endl;
    cout<<knapsack(weight,values,n,maxWeight)<<endl;
    
    
    return 0;
}
