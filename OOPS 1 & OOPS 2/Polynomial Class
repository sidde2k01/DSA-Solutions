
/*************
 Driver program to test below functions
 
int main()
{
    int count1,count2,choice;
    cin >> count1;
    
    int *degree1 = new int[count1];
    int *coeff1 = new int[count1];
    
    for(int i=0;i < count1; i++) {
        cin >> degree1[i];
    }
    
    for(int i=0;i < count1; i++) {
        cin >> coeff1[i];
    }
    
    Polynomial first;
    for(int i = 0; i < count1; i++){
        first.setCoefficient(degree1[i],coeff1[i]);
    }
    
    cin >> count2;
    
    int *degree2 = new int[count2];
    int *coeff2 = new int[count2];
    
    for(int i=0;i < count2; i++) {
        cin >> degree2[i];
    }
    
    for(int i=0;i < count2; i++) {
        cin >> coeff2[i];
    }
    
    Polynomial second;
    for(int i = 0; i < count2; i++){
        second.setCoefficient(degree2[i],coeff2[i]);
    }
    
    cin >> choice;
    
    Polynomial result;
    switch(choice){
            // Add
        case 1:
            result = first + second;
            result.print();
            break;
            // Subtract
        case 2 :
            result = first - second;
            result.print();
            break;
            // Multiply
        case 3 :
            result = first * second;
            result.print();
            break;
            
        case 4 : // Copy constructor
        {
            Polynomial third(first);
            if(third.degCoeff == first.degCoeff) {
                cout << "false" << endl;
            }
            else {
                cout << "true" << endl;
            }
            break;
        }
            
        case 5 : // Copy assignment operator
        {
            Polynomial fourth(first);
            if(fourth.degCoeff == first.degCoeff) {
                cout << "false" << endl;
            }
            else {
                cout << "true" << endl;
            }
            break;
        }
            
    }
    
    return 0;
}
****************/

class Polynomial {
    public:
    int *degCoeff;      // Name of your array (Don't change this)
    int capacity;
    public:
    Polynomial(){
        degCoeff=new int[5];
        capacity=5;
        for(int i=0;i<capacity;i++){
            degCoeff[i]=0;
        }
    }
    Polynomial(Polynomial const &p){
        this->degCoeff=new int[p.capacity];
        for(int i=0;i<p.capacity;i++){
            this->degCoeff[i]=p.degCoeff[i];
        }
        this->capacity=p.capacity;
    }
    void operator=(Polynomial const &p){
        this->degCoeff=new int[p.capacity];
        for(int i=0;i<p.capacity;i++){
            this->degCoeff[i]=p.degCoeff[i];
        }
        this->capacity=p.capacity;
    }
    void setCoefficient(int degree,int coefficient){
            while(degree>=capacity){
                int *newdegCoeff=new int[2*capacity];
                for(int i=0;i<capacity;i++){
                    newdegCoeff[i]=degCoeff[i];
                }
                for(int j=capacity;j<2*capacity;j++){
                    newdegCoeff[j]=0;
                }
                delete [] degCoeff;
                degCoeff=newdegCoeff;
                capacity=capacity*2;
            }
            degCoeff[degree]=coefficient;
   }
    Polynomial operator+(Polynomial &p){
       int Max=max(this->capacity,p.capacity);
        if(Max==p.capacity){
            for(int i=capacity;i<p.capacity;i++){
                this->setCoefficient(i,0);
            }
        }
        if(Max==capacity){
            for(int i=p.capacity;i<capacity;i++){
                p.setCoefficient(i,0);
            }
        }
        Polynomial pnew;
        for(int i=0;i<Max;i++){
            pnew.setCoefficient(i,degCoeff[i]+p.degCoeff[i]);
        }
        return pnew;
    }
    Polynomial operator-(Polynomial &p){
        int Max=max(this->capacity,p.capacity);
        if(Max==p.capacity){
            for(int i=capacity;i<p.capacity;i++){
                this->setCoefficient(i,0);
            }
        }
        if(Max==capacity){
            for(int i=p.capacity;i<capacity;i++){
                p.setCoefficient(i,0);
            }
        }
        Polynomial pnew;
        for(int i=0;i<Max;i++){
            pnew.setCoefficient(i,degCoeff[i]-p.degCoeff[i]);
        }
        return pnew;
    }
    Polynomial operator*(Polynomial const &p){
    Polynomial pnew;
    for(int i=0;i<this->capacity;i++){
        Polynomial p1;
        for(int j=0;j<p.capacity;j++){
            p1.setCoefficient(i+j,this->degCoeff[i]*p.degCoeff[j]);
        }
        pnew=pnew+p1;
    }
    return pnew;
}
    void print() const{
        for(int i=0;i<capacity;i++){
            if(degCoeff[i]!=0){
            cout<<degCoeff[i]<<"x"<<i<<" ";
            }
        }
        cout<<endl;
    }
};
