#include<queue>
void findMedian(int *arr, int n){
    if(n==0){
        return;
    }
    if(n==1){
        cout<<arr[0]<<" ";
        return;
    }
    priority_queue<int> maxHeap;
    priority_queue<int,vector<int>,greater<int>> minHeap;
    for(int i=0;i<n;i++){
        if(i==0){
            maxHeap.push(arr[i]);
        }
        else{
            if(arr[i]<maxHeap.top()){
                maxHeap.push(arr[i]);
                if(maxHeap.size()-minHeap.size()>1){
                    minHeap.push(maxHeap.top());
                    maxHeap.pop();
                }
            }
            else{
                minHeap.push(arr[i]);
                if(minHeap.size()-maxHeap.size()>1){
                    maxHeap.push(minHeap.top());
                    minHeap.pop();
                }
            }
        }
        if((i+1)%2==0){
            cout<<((maxHeap.top()+minHeap.top())/2)<<" ";
        }
        else{
            if(maxHeap.size()>minHeap.size()){
                cout<<maxHeap.top()<<" ";
            }
            else{
                cout<<minHeap.top()<<" ";
            }
        }
    }
}
